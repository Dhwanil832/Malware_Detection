# -*- coding: utf-8 -*- 
"""
Created on Thu Mar 12 21:53:17 2020


@author: riya """

import hashlib 
import psutil
import shutil 
import pandas as pd 
import subprocess
from datetime import datetime 
import sys
import pefile 
import os 
import idb 
import time 
import csv

for (root,dirs,files) in os.walk('//vmware-host/Shared Folders/Shared_Malware/', topdown=True):
	print(files)
	print('----------------------') 
for file01 in files:
	src1 = '//vmware-host/Shared Folders/Shared_Malware/'+files[0] 
	dst2 = files[0]
dst = "C:/Users/acer/Desktop/malware/" 
shutil.move(src1,dst)

for (root,dirs,files) in os.walk('C:/Users/acer/Desktop/malware/', topdown=True): 
	abc = dirs

for file in files:
	dst1 = 'C:/Users/acer/Desktop/malware/'+files[0] 
print(dst1)
print('------------------------') 
dst2 = files[0]

def static(): 
	
          try:
                    static.md = hashlib.md5(open(dst1,'rb').read()).hexdigest() 
                    static.sha = hashlib.sha256(open(dst1,'rb').read()).hexdigest() 
                    print("The SHA256 hash value is "+static.sha)
                    print("The MD5 hash value is "+static.md) 
                    data1 = ''
                    static.data = ''
                    file1 = pefile.PE(dst1)
                    for item in file1.DIRECTORY_ENTRY_IMPORT: 
                              for i in item.imports:
                                        data1 = data1 + '\t' + i.name + '\n'
                    harv = 'bbharvest.py '+dst1+ ' -c C:/Users/acer/Desktop/malware/Lab1.csv' 
                    os.system("cmd /c "+harv)
                    res = "Below are the strings present in the executable file:" 
                    with open('C:/Users/acer/Desktop/malware/Lab1.csv') as f:
                              reader = csv.reader(f) 
                              for row in reader:
                                        res1 = ", ".join(row) 
                                        res = res +'\n' + res1
                              print(res) 
                    os.remove('C:/Users/acer/Desktop/malware/Lab1.csv')
                    static.data = static.data + item.dll + '\t : \n' + data1 + '\n' + res + '\n'\ 
                    static.data = static.data + item.dll + '\t : \n' + data1 + '\n' 
                    print(static.data)
                    n = input("Press 0 to go back to main menu: ") 
                    if n == 0:
                              menu() 
                    else:
                              sys.exit() 
          
          except OSError:
                    print("No file found for analysis.") 

def dynamic():
          try:
                    #batch file execution 
                    subprocess.call([r'note.bat'])
                    for (root,dirs,files) in os.walk('C:/Users/acer/Desktop/malware/'): 
                              print('...')
                              print(files) 
                              for file1 in files:
                                        data = "C:/Users/acer/Desktop/malware/"+file1 
                                        if os.path.splitext(data)[1] == '.csv':
                                                  data1= data 
                                                  print(data1)
                              with open(data1) as f: 
                                        reader = csv.reader(f) 
                                        i = reader.next()
                                        rest = [row for row in reader] 
                              dicts = {}
                              dynamic.ls = '' 
                              ls2 = ''
                              lsts = [] 
                              temp = []
                              reader1 = csv.reader(open(data1)) 
                              for row in reader1:
                                        if row[1] == dst2: 
                                                  key = row[0]
                                                  if key in dicts: 
                                                            pass
                                                  else:
                                                            dicts[key] = row[1:] 
                                        for key,value in dicts.items():
                                                  temp = [key,value] 
                                                  lsts.append(temp)
                                        for sublist in lsts: 
                                                  ls1 = sublist[0]
                                                  for item in range(len(sublist[1])): 
                                                            ls2 = ls2+'\t\n' + sublist[1][item]
                                                  dynamic.ls = ls1+ ls2 
                                        print(dynamic.ls)
                                        subprocess.Popen(dst1) 
                                        processes = []

                                        for process in psutil.process_iter(): # get all process info in one shot
                                                  with process.oneshot(): # get the process id 
                                                            pid = process.pid
                                                            name = process.name() 
                                                            if name.startswith(dst2):
                                                                      create_time = datetime.fromtimestamp(process.create_time()) 
                                                                      try:
                                                                                # get the number of CPU cores that can execute this process 
                                                                                cores = len(process.cpu_affinity())
                                                                      except psutil.AccessDenied: 
                                                                                cores = 0
                                                                                          # get the CPU usage percentage 
                                                                      cpu_usage = process.cpu_percent() 
                                                                      status= process.statue()
                                                                      try:
                                                                                          # get the process priority (a lower value means a more prioritized 
                                                                                nice = int(process.nice())
                                                                      except psutil.AccessDenied: 
                                                                                nice = 0
                                                                      try:
                                                                                          # get the memory usage of this process in bytes 
                                                                                memory_usage = process.memory_full_info().uss
                                                                      except psutil.AccessDenied:
                                                                                memory_usage = 0


                                                                      # total process read and written bytes 
                                                                      io_counters = process.io_counters() 
                                                                      read_bytes = io_counters.read_bytes 
                                                                      write_bytes = io_counters.write_bytes 
                                                                      n_threads = process.num_threads() 
                                                                      try:
                                                                                username = process.username() 
                                                                      except psutil.AccessDenied:
                                                                                username = "N/A"
                                                                                processes.append({'pid': pid, 'name': name, 'create_time': create_time,'cores': cores, 'cpu_usage': cpu_usage, 'status': status, 'nice': nice, 'memory_usage': memory_usage, 'read_bytes': read_bytes, 'write_bytes': write_bytes, 'n_threads': n_threads, 'username': username})
                                        df = pd.DataFrame(processes) 
                                        data5 = ''
                                        data5 = df                                        
                                        data5 = str(df)
                                        df.set_index('pid', inplace=True)
                                                  #=============================================================================

                                        if name== " main ": 
                                                  import argparse
                                                  parser = argparse.ArgumentParser(description="Process Viewer & Monitor")
                                                  parser.add_argument("-c", "--columns", help="""Columns	to	show,		available	are name,create_time,cores,cpu_usage,status,nice,memory_usage,read_byt es,write_bytes,n_threads,username.	Default		is name,cpu_usage,memory_usage,read_bytes,write_bytes,status,create_ti me,nice,n_threads,cores.""", default="name,cpu_usage,memory_usage,read_bytes,write_bytes,status,create_time,nice,n_threads,cores")
                                                  parser.add_argument("-s", "--sort-by", dest="sort_by", help="Column to sort by, default is memory_usage .", default="memory_usage")
                                                  parser.add_argument("--descending", action="store_true", help="Whether to sort in descending order.")
                                                  parser.add_argument("-n", help="Number of processes to show, will show all if 0 is specified, default is 25 .", default=25)


                                        # parse arguments
                                                  args = parser.parse_args() 
                                                  columns = args.columns 
                                                  sort_by = args.sort_by 
                                                  descending = args.descending 
                                                  n = int(args.n)
                                        #=============================================================================


                                                  df.sort_values(sort_by, inplace=True, ascending=not descending)


                                                  def get_size(bytes):
                                                            """
                                                                      Returns size of bytes in a nice format 
                                                            """
                                                            df['memory_usage'] = df['memory_usage'].apply(get_size) 
                                                            df['write_bytes'] = df['write_bytes'].apply(get_size) 
                                                            df['read_bytes'] = df['read_bytes'].apply(get_size)
                                                            df['create_time'] = df['create_time'].apply(datetime.strftime, args=("%Y-%m-%d%H:%M:%S",))
                                                            data5 = ''
                                                            data5 = data5 + df.head(n).to_string() 
                                                            dynamic.da = df.head(n).to_string() 
                                                            print(dynamic.da)
                                                            n = input("Press 0 to go back to main menu: ") 
                                                            if n == 0:
                                                                      menu() 
                                                            else:
                                                                      sys.exit() 
          except OSError:
                    print("No file found for analysis.")


def adv_static(): 
          try:

                    for (root,dirs,files) in os.walk('C:/Users/acer/Desktop/malware/'): 
                              print('---')
                    for file1 in files:
                              dst11 = "C:/Users/acer/Desktop/malware/"+file1 
                              print(dst1)
                    adv_static.ans= '' 
                    cmd = 'idaq -B '+dst1
                    os.system("cmd /c "+cmd)
                    for (root,dirs,files) in os.walk('C:/Users/acer/Desktop/malware/'): 
                              print('...')
                    for file1 in files:
                              data = "C:/Users/acer/Desktop/malware/"+file1 
                              if os.path.splitext(data)[1] == '.idb':
                                        data1= data

                                        print(data1)
                                        print("IDA database file found and starting analysis...") 
                                        with idb.from_file(data1) as db:
                                                  api = idb.IDAPython(db) 
                                                  ipfil = api.idc.GetInputFile()
                                                  print('Input file in analysis: %s' % (api.idc.GetInputFile())) 
                                                  for ea in api.idautils.Functions():
                                                            adv_static.ans = adv_static.ans + '%x: %s' % (ea, api.idc.GetFunctionName(ea))+'\n\t %s' % api.idc.GetDisasm(ea) +'\n'
                                                  print(adv_static.ans)


                              else:
                                        pass
                              n = input("Press 0 to go back to main menu: ") 
                              if n == 0:
                                        menu()
                              else:
                                        sys.exit()
          except IOError:
                    print("Please check yout input file.")


def report(): 
          try:
                    res = ''
                    fopen = open('C:/Users/acer/Desktop/report.txt',"w") 
                    res = res + '******************************Static Analysis******************************* \nThe MD5 hash value is '+static.md + '\n The SHA256 hash value is ' +static.sha + '\nThe DLLs are as follows: \n' +static.data + '\n ***********************Dynamic	Analysis*****************************\n'+dynamic.da+'\n********Process Monitor Result*********** '+dynamic.ls+'\n'+'\n	***************************************Advanced	Static	Analysis Result********************************\nResult is as follows:\n'+adv_static.ans+'\n' 
                    
                    print(res)
                    fopen.write(res) 
                    fopen.close()

                    n = input("Press 0 to go back to main menu: ") 
                    if n == 0:
                              menu() 
                    else:
                              sys.exit() 
          except IOError:
                    print("Error in generating report.") 
          
def menu():
          print("************MAIN MENU**************") 
          print()
          choice = input("""
                    1.Static Analysis
                    2.Dynamic Analysis
                    3.Advanced Static Analysis
                    4.Report
                    5.Exit


                    Please enter your choice: """) 
          if choice == 1:
                    static()
          elif choice == 2:
                    dynamic() 
          elif choice == 3:
                    adv_static() 
          elif choice == 4:
                    report()
          elif choice == 5: 
                    sys.exit()
          else:
                    print("Please select any option: ") 
                    print("Please try again")
                    menu()
menu()